# creates executables for various operating systems using pyinstaller
name: Create Executables

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

# set up the release tag
jobs:
  build:
    # multi-os execution
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
    
    # setup python
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - run: pip install .
    # create executables using pyinstaller
    - if: ${{ matrix.os == 'windows-latest' }}
      run: pyinstaller specs/vims_to_ics_win.spec
    - if: ${{ matrix.os == 'macos-latest' }}
      run: pyinstaller specs/vims_to_ics_mac.spec
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      run: pyinstaller specs/vims_to_ics_ubuntu.spec

    # Zip artifacts
    - if: ${{ matrix.os == 'windows-latest' }}
      run: Compress-Archive -Path dist/vims_to_ics* -Destination binaries-${{ matrix.os}}.zip
    - if: ${{ matrix.os == 'ubuntu-latest' }}
      run: zip -r binaries-${{ matrix.os}}.zip dist/vims_to_ics*;
    - if: ${{ matrix.os == 'macos-latest' }}
      run: zip -r binaries-${{ matrix.os}}.zip dist/vims_to_ics.app;


    # Upload artifacts
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os}}
        path: binaries-${{ matrix.os}}.zip

    # Create release
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "binaries-${{ matrix.os}}.zip"
        name: 'Release'
        tag: 'release'
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
